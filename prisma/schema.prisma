generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  fullName String
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  verified DateTime?

  provider String?
  providerId String?

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id

  name        String
  imageUrl    String
  description String
  price       Int
  tags        String[]

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model AdditionalParameter {
//   id Int @id @default(autoincrement())

//   name String

//   Product  Product[]
//   cartItem CartItem[]

//   createdAt DateTime @default(now())
// }

model Cart {
  id Int @id @default(autoincrement())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  token String

  totalAmount Int @default(0)

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  token String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?

  items Json

  fullName String
  email    String
  phone    String
  address  String?
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
